// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Nft extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Nft entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Nft entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Nft", id.toString(), this);
  }

  static load(id: string): Nft | null {
    return store.get("Nft", id) as Nft | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string | null {
    let value = this.get("tokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenId(value: string | null) {
    if (value === null) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromString(value as string));
    }
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (value === null) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(value as string));
    }
  }

  get approved(): Bytes | null {
    let value = this.get("approved");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set approved(value: Bytes | null) {
    if (value === null) {
      this.unset("approved");
    } else {
      this.set("approved", Value.fromBytes(value as Bytes));
    }
  }

  get user(): Bytes | null {
    let value = this.get("user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes | null) {
    if (value === null) {
      this.unset("user");
    } else {
      this.set("user", Value.fromBytes(value as Bytes));
    }
  }

  get unwrappedTokenAddress(): Bytes | null {
    let value = this.get("unwrappedTokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set unwrappedTokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("unwrappedTokenAddress");
    } else {
      this.set("unwrappedTokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get unwrappedTokenId(): string | null {
    let value = this.get("unwrappedTokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set unwrappedTokenId(value: string | null) {
    if (value === null) {
      this.unset("unwrappedTokenId");
    } else {
      this.set("unwrappedTokenId", Value.fromString(value as string));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }
}
